# }
# Chunk 8
# #identify which subsampling strategy and then group those list items
# strats<-unique(names(sum.boots[[k]])) %>% mixedsort()
# # strats<-paste("can",c(25,50,75,100),sep="")
# n.ss<-length(strats)
#
# #setup separate lists for each strategy
# sum.boots.ss<-replicate(n=n.ss,vector())
# meta.boots.ss<-replicate(n=n.ss,vector())
# # tree.boots.ss<-replicate(n=n.ss,vector())
# sublin.long.ss<-replicate(n=n.ss,vector())
# names(sum.boots.ss)<-strats
# names(meta.boots.ss)<-strats
# names(sublin.long.ss)<-strats
#
#
# # for each strat, pull its matching items
# for(q in 1:n.ss) { #loop across strategy
#   #extract matching items (can25_1 and can25_2, for examp) into new list
#   #note all the objectssame order
#   sum.boots.ss[[q]]<-sum.boots[grepl(strats[q],names(sum.boots))] #should subset the list by items that match the strategy name added above
#   meta.boots.ss[[q]]<-meta.boots[grepl(strats[q],names(meta.boots))]
#   sublin.long.ss[[q]]<-sublin.long[grepl(strats[q],names(sublin.long))]
#
# } #end loop across strategy
# Chunk 9
strat.order<-paste("can",c(25,50,75,100),sep="")
sublin.tot.df<-data.frame(strategy=NA,sublin.n=NA)
for (k in 1:n.B){
sublin.tot.df[k,1]<-sum.boots[[k]]$Strategy[1]
sublin.tot.df[k,2]<-nrow(sum.boots[[k]])
}
# sublin.tot.df<-sublin.tot.df %>% separate(col = strategy,into = c("strat1","strat2"),sep="_")
sublin.tot.df$strategy<-factor(sublin.tot.df$strategy,strat.order)
n.sublin.by.strat<-sublin.tot.df %>%
dplyr::group_by(strategy) %>%
dplyr::summarise(.groups="rowwise",
mean.n=mean(sublin.n,digits = 2),
lower.n=lower.ci.X(sublin.n,2),
upper.n=upper.ci.X(sublin.n,2),
width.n=width.ci.X(sublin.n,2)) %>% ungroup() %>% as.data.frame() #
n.sublin.by.strat$strategy<-factor(n.sublin.by.strat$strategy,levels=strat.order)
#plot thisas bar plot
ggplot(n.sublin.by.strat)+
geom_bar(aes(x=strategy,y=mean.n,fill=strategy),stat="identity")+
geom_errorbar(aes(x=strategy,ymin=lower.n,ymax=upper.n),width=0.2,color="grey33")+
pubTheme+
theme(legend.position = "none")+
labs(y="Estimated # sublineages",x="Subsampling strategy")+
StratFillScale
ggsave(paste(f.out,"n.sublin.by.strategy.barplot.error.png",sep=""),height=4,width=4,units="in")
#plot with individual points
ggplot(sublin.tot.df,aes(x=strategy,y=sublin.n,color=strategy))+
geom_point(stat="identity",alpha=0.7,position=position_jitterdodge())+
geom_boxplot(width=0.4,alpha=0.7)+
pubTheme+
theme(legend.position = "none")+
labs(y="Estimated # sublineages",x="Subsampling strategy")+
StratColorScale
ggsave(paste(f.out,"n.sublin.by.strategy.boxplot.png",sep=""),height=4,width=4,units="in")
# Chunk 10
#mid script lists for rolling means
Parent.Location.sum.boots<-replicate(n=n.B,vector())
Parent.Location.sum.boots.full<-replicate(n=n.B,vector())
Node.Location.sum.boots<- replicate(n=n.B,vector())
Node.Location.sum.boots.full<-replicate(n=n.B,vector())
#prep list item
sum.Par.Prov.l<-replicate(n.B,vector())
#go through each list item/subsample
## tabulate instances of location pairs
for (k in 1:n.B){
sum.Par.Prov.l[[k]]<-sum.boots[[k]] %>%
dplyr::group_by (Parent.Location, Node.Location) %>%
dplyr::summarize (.groups="rowwise", n.Par= n()) %>%
as.data.frame() %>%
mutate(perc.Par=(n.Par/sum(n.Par))*100)
## add a column for subsample strategy: can25, 50, 75, or 100
sum.Par.Prov.l[[k]]$Strategy<-sum.boots[[k]]$Strategy[1]
sum.Par.Prov.l[[k]]$Boot<-sum.boots[[k]]$Boot[1]
}
## rbind the summaries
sum.Par.Prov<-bind_rows(sum.Par.Prov.l)
#summarize the mean and range for each of 1), 2) and 3) by strategy
sum.Par.Prov.summary<-sum.Par.Prov %>%
dplyr::group_by(Parent.Location, Node.Location, Strategy) %>%
dplyr::summarize(.groups="rowwise",
mean.n=round(mean(n.Par),digits=2),
sd.n=round(sd(n.Par,na.rm=T),digits=2),
upper.n=upper.ci.X(n.Par, 2),
lower.n=lower.ci.X(n.Par, 2),
width.n=width.ci.X(n.Par,2),
mean.perc=round(mean(perc.Par),digits=2),
sd.perc=round(sd(perc.Par,na.rm=T),digits=2),
upper.perc=upper.ci.X(perc.Par, 2),
lower.perc=lower.ci.X(perc.Par,2),
width.perc=width.ci.X(perc.Par,2)) %>%
as.data.frame()
#expect warnings and NAs for instances where only one observations (messes up the confints)
#summarize the widths of n
sum.Par.Prov.summary$Strategy<-factor(sum.Par.Prov.summary$Strategy, level=strat.order)
sum.Par.Prov.summary.wid<-sum.Par.Prov.summary %>%
dplyr::group_by(Strategy) %>%
dplyr::summarise(.groups="rowwise",
mean.CIwidth=round(mean(width.n,na.rm=T),digits=2),
median.CIwidth=median(width.n,digits=2,na.rm=T),
lower.CIwidth=lower.ci.X(width.n,digits=2),
upper.CIwidth=upper.ci.X(width.n,digits=2),
width.CIwidth=width.ci.X(width.n,digits=2)) %>% ungroup() %>% as.data.frame()
sum.Par.Prov.summary.wid$Strategy<-factor(sum.Par.Prov.summary.wid$Strategy,levels=strat.order)
# sum.Par.Prov.summary.wid
write.csv(sum.Par.Prov.summary.wid,
paste(f.out,"loc.pair.total.sublin.variability.by.strat.csv",sep=""))
# plot this where each loc-pair CI width is a y value for a point, overlay the summary widths
ggplot(data=sum.Par.Prov.summary)+
geom_point(aes(x=Strategy,y=width.n,color=Strategy,group=Strategy),position=position_jitterdodge(),alpha=0.7)+
geom_boxplot(aes(x=Strategy,y=width.n,color=Strategy,group=Strategy),width=0.4,alpha=0.7)+
# geom_point(data=sum.Par.Prov.summary.wid, aes(x=Strategy,y=mean.CIwidth),shape=13)+
# geom_errorbar(data=sum.Par.Prov.summary.wid,
# aes(x=Strategy,ymin=lower.CIwidth,ymax=upper.CIwidth),width=0.2,color="grey33")+
pubTheme+
theme(legend.position = "none")+
labs(y="CI width: # sublineages per location pair",x="Subsampling strategy")+
StratColorScale
ggsave(paste(f.out,"CIwidth.sublin.by.strategy.boxplot.png",sep=""),height=4,width=4,units="in")
# Chunk 11
## Alluvial plot for each strategy
sum.Par.Prov.summary.100<-sum.Par.Prov.summary[which(sum.Par.Prov.summary$Strategy=="can100"),]
sum.Par.Prov.summary.100$subject<-1:nrow(sum.Par.Prov.summary.100)
ord.count<-sum.Par.Prov.summary.100%>% dplyr::group_by(Parent.Location) %>%
dplyr::summarise(.groups="rowwise",n=sum(mean.n)) %>% as.data.frame()
ord.count<-ord.count[rev(order(ord.count$n)),'Parent.Location']
sum.Par.Prov.summary.100$Parent.Location<-factor(sum.Par.Prov.summary.100$Parent.Location,levels=ord.count)
ord.prov<-sum.Par.Prov.summary.100%>% dplyr::group_by(Node.Location) %>%
dplyr::summarise(.groups="rowwise",n=sum(mean.n)) %>% as.data.frame()
ord.prov<-ord.prov[rev(order(ord.prov$n)),'Node.Location']
sum.Par.Prov.summary.100$Node.Location<-factor(sum.Par.Prov.summary.100$Node.Location,levels=ord.prov)
#make it long
sum.Par.Prov.summary.100.long<-sum.Par.Prov.summary.100 %>% pivot_longer(1:2, names_to = "geo.type", values_to = "geo")
#order the geo types
sum.Par.Prov.summary.100.long$geo.type<-factor(sum.Par.Prov.summary.100.long$geo.type,levels=c("Parent.Location","Node.Location"),labels=c("Global origin","Canadian province"))
## Alluvial plot
P1<- ggplot(sum.Par.Prov.summary.100.long,
aes(x = geo.type, stratum = geo, alluvium = subject,
y = mean.n,
fill = geo, label = geo)) +
scale_x_discrete(expand = c(0.01,0.01)) +
scale_y_continuous(expand = c(0,0)) +
geom_flow(alpha = .6,width=0.45) +
geom_stratum(alpha = .8,width=0.45) +
geom_text(stat = "stratum", size = 3.4,min.y=3,fontface="bold") +
pubTheme+
theme(legend.position = "none", axis.line = element_blank(), text =element_text(size=14),
axis.ticks.x = element_blank(),axis.text.x = element_text(hjust=c(0.5,0.6)))+
labs(x=NULL,y="# sublineages")+
GlobFillScale
P1
ggsave(paste(f.out,"sankeyPlot.Parent.Node.subsamp100.png",sep=""),height=10,width=5,units="in")
## Alluvial plot for each strategy
sum.Par.Prov.summary.75<-sum.Par.Prov.summary[which(sum.Par.Prov.summary$Strategy=="can75"),]
sum.Par.Prov.summary.75$subject<-1:nrow(sum.Par.Prov.summary.75)
ord.count<-sum.Par.Prov.summary.75%>% dplyr::group_by(Parent.Location) %>%
dplyr::summarise(.groups="rowwise",n=sum(mean.n)) %>% as.data.frame()
ord.count<-ord.count[rev(order(ord.count$n)),'Parent.Location']
sum.Par.Prov.summary.75$Parent.Location<-factor(sum.Par.Prov.summary.75$Parent.Location,levels=ord.count)
ord.prov<-sum.Par.Prov.summary.75%>% dplyr::group_by(Node.Location) %>%
dplyr::summarise(.groups="rowwise",n=sum(mean.n)) %>% as.data.frame()
ord.prov<-ord.prov[rev(order(ord.prov$n)),'Node.Location']
sum.Par.Prov.summary.75$Node.Location<-factor(sum.Par.Prov.summary.75$Node.Location,levels=ord.prov)
#make it long
sum.Par.Prov.summary.75.long<-sum.Par.Prov.summary.75 %>% pivot_longer(1:2, names_to = "geo.type", values_to = "geo")
#order the geo types
sum.Par.Prov.summary.75.long$geo.type<-factor(sum.Par.Prov.summary.75.long$geo.type,levels=c("Parent.Location","Node.Location"),labels=c("Global origin","Canadian province"))
## Alluvial plot
P1<- ggplot(sum.Par.Prov.summary.75.long,
aes(x = geo.type, stratum = geo, alluvium = subject,
y = mean.n,
fill = geo, label = geo)) +
scale_x_discrete(expand = c(0.01,0.01)) +
scale_y_continuous(expand = c(0,0)) +
geom_flow(alpha = .6,width=0.45) +
geom_stratum(alpha = .8,width=0.45) +
geom_text(stat = "stratum", size = 3.4,min.y=3,fontface="bold") +
pubTheme+
theme(legend.position = "none", axis.line = element_blank(), text =element_text(size=14),
axis.ticks.x = element_blank(),axis.text.x = element_text(hjust=c(0.5,0.6)))+
labs(x=NULL,y="# sublineages")+
GlobFillScale
P1
ggsave(paste(f.out,"sankeyPlot.Parent.Node.subsamp75.png",sep=""),height=10,width=5,units="in")
## Alluvial plot for each strategy
sum.Par.Prov.summary.50<-sum.Par.Prov.summary[which(sum.Par.Prov.summary$Strategy=="can50"),]
sum.Par.Prov.summary.50$subject<-1:nrow(sum.Par.Prov.summary.50)
ord.count<-sum.Par.Prov.summary.50%>% dplyr::group_by(Parent.Location) %>%
dplyr::summarise(.groups="rowwise",n=sum(mean.n)) %>% as.data.frame()
ord.count<-ord.count[rev(order(ord.count$n)),'Parent.Location']
sum.Par.Prov.summary.50$Parent.Location<-factor(sum.Par.Prov.summary.50$Parent.Location,levels=ord.count)
ord.prov<-sum.Par.Prov.summary.50%>% dplyr::group_by(Node.Location) %>%
dplyr::summarise(.groups="rowwise",n=sum(mean.n)) %>% as.data.frame()
ord.prov<-ord.prov[rev(order(ord.prov$n)),'Node.Location']
sum.Par.Prov.summary.50$Node.Location<-factor(sum.Par.Prov.summary.50$Node.Location,levels=ord.prov)
#make it long
sum.Par.Prov.summary.50.long<-sum.Par.Prov.summary.50 %>% pivot_longer(1:2, names_to = "geo.type", values_to = "geo")
#order the geo types
sum.Par.Prov.summary.50.long$geo.type<-factor(sum.Par.Prov.summary.50.long$geo.type,levels=c("Parent.Location","Node.Location"),labels=c("Global origin","Canadian province"))
## Alluvial plot
P1<- ggplot(sum.Par.Prov.summary.50.long,
aes(x = geo.type, stratum = geo, alluvium = subject,
y = mean.n,
fill = geo, label = geo)) +
scale_x_discrete(expand = c(0.01,0.01)) +
scale_y_continuous(expand = c(0,0)) +
geom_flow(alpha = .6,width=0.45) +
geom_stratum(alpha = .8,width=0.45) +
geom_text(stat = "stratum", size = 3.4,min.y=3,fontface="bold") +
pubTheme+
theme(legend.position = "none", axis.line = element_blank(), text =element_text(size=14),
axis.ticks.x = element_blank(),axis.text.x = element_text(hjust=c(0.5,0.6)))+
labs(x=NULL,y="# sublineages")+
GlobFillScale
P1
ggsave(paste(f.out,"sankeyPlot.Parent.Node.subsamp50.png",sep=""),height=10,width=5,units="in")
## Alluvial plot for each strategy
sum.Par.Prov.summary.25<-sum.Par.Prov.summary[which(sum.Par.Prov.summary$Strategy=="can25"),]
sum.Par.Prov.summary.25$subject<-1:nrow(sum.Par.Prov.summary.25)
ord.count<-sum.Par.Prov.summary.25%>% dplyr::group_by(Parent.Location) %>%
dplyr::summarise(.groups="rowwise",n=sum(mean.n)) %>% as.data.frame()
ord.count<-ord.count[rev(order(ord.count$n)),'Parent.Location']
sum.Par.Prov.summary.25$Parent.Location<-factor(sum.Par.Prov.summary.25$Parent.Location,levels=ord.count)
ord.prov<-sum.Par.Prov.summary.25%>% dplyr::group_by(Node.Location) %>%
dplyr::summarise(.groups="rowwise",n=sum(mean.n)) %>% as.data.frame()
ord.prov<-ord.prov[rev(order(ord.prov$n)),'Node.Location']
sum.Par.Prov.summary.25$Node.Location<-factor(sum.Par.Prov.summary.25$Node.Location,levels=ord.prov)
#make it long
sum.Par.Prov.summary.25.long<-sum.Par.Prov.summary.25 %>% pivot_longer(1:2, names_to = "geo.type", values_to = "geo")
#order the geo types
sum.Par.Prov.summary.25.long$geo.type<-factor(sum.Par.Prov.summary.25.long$geo.type,levels=c("Parent.Location","Node.Location"),labels=c("Global origin","Canadian province"))
## Alluvial plot
P1<- ggplot(sum.Par.Prov.summary.25.long,
aes(x = geo.type, stratum = geo, alluvium = subject,
y = mean.n,
fill = geo, label = geo)) +
scale_x_discrete(expand = c(0.01,0.01)) +
scale_y_continuous(expand = c(0,0)) +
geom_flow(alpha = .6,width=0.45) +
geom_stratum(alpha = .8,width=0.45) +
geom_text(stat = "stratum", size = 3.4,min.y=3,fontface="bold") +
pubTheme+
theme(legend.position = "none", axis.line = element_blank(), text =element_text(size=14),
axis.ticks.x = element_blank(),axis.text.x = element_text(hjust=c(0.5,0.6)))+
labs(x=NULL,y="# sublineages")+
GlobFillScale
P1
ggsave(paste(f.out,"sankeyPlot.Parent.Node.subsamp25.png",sep=""),height=10,width=5,units="in")
# Chunk 12
for (k in 1:n.B){
#make sure this a date
sum.boots[[k]]$tmrca.dt<-as.Date(sum.boots[[k]]$tmrca.dt)
#### Calculate a rolling 7-day mean for origins ####
## count the importations by origin location over time
Parent.Location.sum.boots[[k]]<-sum.boots[[k]] %>%
dplyr::select(Parent.Location, Lineage,tmrca.dt, Strategy) %>%
dplyr::group_by(tmrca.dt, Parent.Location, Strategy) %>% #ADD STRATEGY grouping
dplyr::summarize(.groups="rowwise", total=n()) %>%
dplyr::arrange(desc(Parent.Location)) %>%
dplyr::group_by(Parent.Location)
#need to add rows for missing dates
alldays<-seq(ymd(first(sort(Parent.Location.sum.boots[[k]]$tmrca.dt))),
ymd(last(sort(Parent.Location.sum.boots[[k]]$tmrca.dt))),
by='1 day')
#make an empty df in same structure as above then populate it
nL<-length(unique(Parent.Location.sum.boots[[k]]$Parent.Location))
nD<-length(alldays)
Parent.Location.sum.boots.full[[k]]<-data.frame(tmrca.dt=rep(alldays,times=nL),
Parent.Location = sort(rep(unique(Parent.Location.sum.boots[[k]]$Parent.Location),times=nD)),
total=0)
# nrow(Parent.Location.sum.boots[[k]].empty)==nD*nL
#populate it
for (i in 1:nrow(Parent.Location.sum.boots.full[[k]])){
#look for a match
match<-which(Parent.Location.sum.boots[[k]]$Parent.Location==Parent.Location.sum.boots.full[[k]]$Parent.Location[i] &
Parent.Location.sum.boots[[k]]$tmrca.dt==Parent.Location.sum.boots.full[[k]]$tmrca.dt[i])
if(length(match)==0) next #no match, no change
#else, replace:
Parent.Location.sum.boots.full[[k]]$total[i]<-Parent.Location.sum.boots[[k]]$total[match]
}
# sum(Parent.Location.sum.boots.full[[k]]$total[Parent.Location.sum.boots.full[[k]]$Parent.Location=="USA"])==sum(Parent.Location.sum.boots[[k]]$total[Parent.Location.sum.boots[[k]]$Parent.Location=="USA"])
Parent.Location.sum.boots.full[[k]]<-Parent.Location.sum.boots.full[[k]] %>%
dplyr::mutate(intros_mean7d = zoo::rollmean(total, k = 7, fill = NA),
intros_mean14d = zoo::rollmean(total, k = 14, fill = NA),
intros_median7d = zoo::rollmedian(total, k = 7, fill = NA),
#right align to sum all previous week
intros_sum7d = zoo::rollsum(total, k = 7, fill = NA,align="right")) %>%
#rolling mean and median weekly importation rate
dplyr::mutate(intros_meansum7d = zoo::rollmean(intros_sum7d, k = 7, fill = NA),
intros_mediansum7d = zoo::rollmedian(intros_sum7d, k = 7, fill = NA),) %>%
dplyr::ungroup()
## count the importations by node.location over time
Node.Location.sum.boots[[k]]<-sum.boots[[k]] %>%
dplyr::select(Node.Location, Lineage,tmrca.dt, Strategy) %>%
group_by(tmrca.dt, Node.Location, Strategy) %>%
dplyr::summarize(.groups="rowwise", total=n()) %>%
dplyr::arrange(desc(Node.Location)) %>%
dplyr::group_by(Node.Location)
#need to add rows for missing dates
alldays<-seq(ymd(first(sort(Node.Location.sum.boots[[k]]$tmrca.dt))),
ymd(last(sort(Node.Location.sum.boots[[k]]$tmrca.dt))),
by='1 day')
#make a empty df in same structure as above then populate it
nL<-length(unique(Node.Location.sum.boots[[k]]$Node.Location))
nD<-length(alldays)
Node.Location.sum.boots.full[[k]]<-data.frame(tmrca.dt=rep(alldays,times=nL),
Node.Location=sort(rep(unique(Node.Location.sum.boots[[k]]$Node.Location),times=nD)),
total=0)
# nrow(Node.Location.sum.boots[[k]].empty)==nD*nL
#populate it
for (i in 1:nrow(Node.Location.sum.boots.full[[k]])){
#look for a match
match<-which(Node.Location.sum.boots[[k]]$Node.Location==Node.Location.sum.boots.full[[k]]$Node.Location[i] &
Node.Location.sum.boots[[k]]$tmrca.dt==Node.Location.sum.boots.full[[k]]$tmrca.dt[i])
if(length(match)==0) next #no match, no change
#else, replace:
Node.Location.sum.boots.full[[k]]$total[i]<-Node.Location.sum.boots[[k]]$total[match]
}
# sum(Node.Location.sum.boots.full[[k]]$total[Node.Location.sum.boots.full[[k]]$Node.Location=="USA"])==sum(Node.Location.sum.boots[[k]]$total[Node.Location.sum.boots[[k]]$Node.Location=="USA"])
Node.Location.sum.boots.full[[k]]<-Node.Location.sum.boots.full[[k]] %>%
dplyr::mutate(intros_mean7d = zoo::rollmean(total, k = 7, fill = NA),
intros_mean14d = zoo::rollmean(total, k = 14, fill = NA),
intros_median7d = zoo::rollmedian(total, k = 7, fill = NA),
intros_sum7d = zoo::rollsum(total, k = 7, fill = NA,align="right")) %>% #right align to sum all prev
#rolling mean and median weekly importation rate
dplyr::mutate(intros_meansum7d = zoo::rollmean(intros_sum7d, k = 7, fill = NA),
intros_mediansum7d = zoo::rollmedian(intros_sum7d, k = 7, fill = NA),) %>%
dplyr::ungroup()
}
# Chunk 13
#Add subsample strategy as a column (isn't it already in there?)
for (k in 1:n.B){
## add a column for subsample
Parent.Location.sum.boots.full[[k]]$Strategy<-sum.boots[[k]]$Strategy[1]
Parent.Location.sum.boots.full[[k]]$Boots<-sum.boots[[k]]$Boots[1]
Node.Location.sum.boots.full[[k]]$Strategy<-sum.boots[[k]]$Strategy[1]
Node.Location.sum.boots.full[[k]]$Boots<-sum.boots[[k]]$Boots[1]
}
## BY ORIGINS
## rbind all the summaries
sum.Par.Roll<-bind_rows(Parent.Location.sum.boots.full)
#summarize the mean and confint for each stratgey
sum.Par.Roll.summary<-sum.Par.Roll %>%
dplyr::group_by(tmrca.dt, Parent.Location, Strategy) %>% #CHANGE to add strategy
dplyr::summarize(.groups="rowwise",
intros_meansum7d.mean=(mean(intros_meansum7d,na.rm=T)),
intros_meansum7d.sd=sd(intros_meansum7d,na.rm=T),
intros_meansum7d.upper=upper.ci.X(intros_meansum7d,digits=2),
intros_meansum7d.lower=lower.ci.X(intros_meansum7d,digits=2),
intros_meansum7d.width=width.ci.X(intros_meansum7d,digits=2)) %>%
as.data.frame()
#order the geos
sum.Par.Roll.summary$Parent.Location<-factor(sum.Par.Roll.summary$Parent.Location,levels=ord.count)
## BY PROVINCE
## rbind the summaries
sum.Prov.Roll<-bind_rows(Node.Location.sum.boots.full)
#summarize the mean and confint by strategy
sum.Prov.Roll.summary<-sum.Prov.Roll %>% dplyr::group_by(tmrca.dt, Node.Location, Strategy) %>%
dplyr::summarize(.groups="rowwise",
intros_meansum7d.mean=(mean(intros_meansum7d,na.rm=T)),
intros_meansum7d.sd=(sd(intros_meansum7d,na.rm=T)),
intros_meansum7d.upper=upper.ci.X(intros_meansum7d,digits=2),
intros_meansum7d.lower=lower.ci.X(intros_meansum7d,digits=2),
intros_meansum7d.width=width.ci.X(intros_meansum7d,digits=2)) %>%
as.data.frame()
#order the geos
sum.Prov.Roll.summary$Node.Location<-factor(sum.Prov.Roll.summary$Node.Location,levels=ord.prov)
# Chunk 14
#dataframe for travel restrictions
trav.df<-data.frame(x1=as.Date("2020-03-21"),y1=-0.5, x2=as.Date("2020-03-16"),y2=-1.5)
sum.Par.Roll.summary$Strategy<-factor(sum.Par.Roll.summary$Strategy,levels=strat.order)
#rolling importation rate, by origin
p1<-sum.Par.Roll.summary %>%
ggplot(aes(x=tmrca.dt,y=intros_meansum7d.mean,group=Parent.Location,fill=Parent.Location))+
geom_density(stat="identity", position="stack",lwd=0,alpha=0.9)+
GlobFillScale+
pubThemeDate+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
text=element_text(size=10,face="bold"),
legend.position = "none")+
scale_x_date(date_breaks = "1 month", date_minor_breaks = "2 weeks", date_labels = "%b %Y",limits = c(as.Date("2020-01-01"),as.Date("2021-01-01")) ) +
labs(x="Date of most recent common ancestor",y="# sublineages introduced per week", fill="Origin Location")+
#travel restrictions
geom_vline(xintercept=as.Date("2020-03-21"),color="grey20",linetype=2)+
annotate("text",label="Maximum\nstringency",
x=as.Date("2020-03-28"),y=53,size=4,hjust=0,vjust=1,color="grey20")+
#minimal stringency
geom_vline(xintercept=as.Date("2020-10-10"),color="grey20",linetype=2)+
annotate("text",label="Reduced\nstringency",
x=as.Date("2020-10-14"),y=53,size=4,hjust=0,vjust=1,color="grey20")+
scale_y_continuous(expand=c(0,0),limits=c(-1,65),breaks=seq(0,60,10))+
facet_wrap(.~Strategy,ncol=1)
p1
ggsave(paste(f.out,"sublins.per.week.by.parent.compare.strats.png",sep=""),width=6,height=9,units="in")
#
# ##fake plots to take the legends
# #rolling importation rate, by origin
# p1.f<-sum.Par.Roll.summary %>%
#   ggplot(aes(x=tmrca.dt,y=intros_meansum7d.mean,group=Parent.Location,fill=Parent.Location))+
#   geom_density(stat="identity", position="stack",lwd=0,alpha=0.9)+
#   GlobFillScale+
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         text=element_text(size=9.5,face="bold"),
#         legend.position = c(0.1,1),
#         legend.margin=margin(0,0,0,0),
#         legend.background = element_blank(),
#         legend.justification = c(0,1))+
#   guides(fill = guide_legend(keywidth = 0.7,keyheight=0.7,title.position = "top",title="Global origin",legend.spacing=0,ncol=4))
#
# p1.guide<-get_legend(p1.f)
sum.Prov.Roll.summary$Strategy<-factor(sum.Prov.Roll.summary$Strategy,levels=strat.order)
#rolling importation rate, by province destination
p2<-sum.Prov.Roll.summary %>%
ggplot(aes(x=tmrca.dt,y=intros_meansum7d.mean,group=Node.Location,fill=Node.Location))+
geom_density(stat="identity", position="stack",lwd=0,alpha=0.9)+
GlobFillScale+
pubThemeDate+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.position = "none")+
scale_x_date(date_breaks = "1 month", date_minor_breaks = "2 weeks", date_labels = "%b %Y",limits = c(as.Date("2020-01-01"),as.Date("2021-01-01")) ) +
labs(x="Date of most recent common ancestor",y="# sublineages introduced per week")+
#travel restrictions
geom_vline(xintercept=as.Date("2020-03-21"),color="grey20",linetype=2)+
annotate("text",label="Maximum\nstringency",
x=as.Date("2020-03-28"),y=53,size=4,hjust=0,vjust=1,color="grey20")+
#minimal stringency
geom_vline(xintercept=as.Date("2020-10-10"),color="grey20",linetype=2)+
annotate("text",label="Reduced\nstringency",
x=as.Date("2020-10-14"),y=53,size=4,hjust=0,vjust=1,color="grey20")+
scale_y_continuous(expand=c(0,0),limits=c(-1,70),breaks=seq(0,50,10))+
facet_wrap(.~Strategy,ncol=1)
p2
ggsave(paste(f.out,"sublins.per.week.by.prov.compare.strats.png",sep=""),width=6,height=9,units="in")
# #fake plot to take legend
# p2.f<-sum.Prov.Roll.summary %>%
#   ggplot(aes(x=tmrca.dt,y=intros_meansum7d.mean,group=Node.Location,fill=Node.Location))+
#   geom_density(stat="identity", position="stack",lwd=0,alpha=0.9)+
#   GlobFillScale+
#   theme(axis.text.x=element_text(angle=45,hjust = 1),
#         panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         panel.background=element_rect("grey95"),
#         text=element_text(size=9.5,face="bold"),
#         legend.position = c(0.1,1),
#         legend.margin=margin(0,0,0,0),
#         legend.background = element_blank(),
#         legend.justification = c(0,1))+
#     guides(fill = guide_legend(keywidth = 0.7,keyheight=0.7,title.position = "top",title="Province",legend.spacing=0,ncol=3))
# p2.guide<-get_legend(p2.f)
#
# #make a list of grobs
# ## add in the Canadian province representation plots
# plot.row<-plot_grid(p1,p2,ncol=2,labels=c("A" ,"B"))
# plot.leg<-plot_grid(p1.guide,p2.guide,ncol=2,align="h")
# plot.all<-plot_grid(plot.leg,plot.row,nrow=2,rel_heights = c(0.25,1),align = "v")
#ggsave(plot.all,file="Results/OriginsDestinationsInclRatesOVERTIME_TMRCA_concise.medRXIV.png",width=7,height=4.5,units = "in")
getwd()
library(ape)
library(stringr)
library(dplyr)
library(tidyr)
library(plyr)
library(RColorBrewer)
library(ggplot2)
library(ggtree)
library(ggimage)
library(phytools)
#library(MASS) uploaded by phtools
library(phangorn)
library(forcats)
library(lubridate)
library(gridExtra)
library(cowplot)
library(ggstance)
library(ggalluvial)
library(ggmosaic)
library(gtools)
#import a tsv of name and hex color for LINEAGES
#should be able to just use the tsv from the first bootstrap... we'll see
mycolz<-read.table("colors_out/lineage.colors.tsv",sep="\t")
lin.colz<-row.names(mycolz) #NOTE THIS DIDN"T WORK
mycolz.ch<-as.character(mycolz$mycolz)
names(mycolz.ch)<-lin.colz
LinColScale<-scale_colour_manual(name = "Lineage",values = mycolz.ch,na.value="grey60")
LinFillScale<-scale_fill_manual(name = "Lineage",values = mycolz.ch,na.value="grey60")
#read in lineage groups
lookup.lin<-read.csv("colors_out/lineage.groups.csv",header = T) #lineage group, alias (longform), lineagre
lin.group.col<-read.table("colors_out/lineage.group.colors.tsv",sep="\t") #4 colors
lin.grp.colz<-row.names(lin.group.col)
lin.grp.ch<-as.character(lin.group.col[,1])
names(lin.grp.ch)<-lin.grp.colz
LinGrpColScale<-scale_colour_manual(name = "Lineage",values = lin.grp.ch,na.value="grey60")
LinGrpFillScale<-scale_fill_manual(name = "Lineage",values = lin.grp.ch,na.value="grey60")
### GEO
#import a tsv of name and hex color for LOCATIONS
globalPalette<-read.table("colors_out/global.colors.tsv",sep="\t")
## make color scheme
glob.colz<-row.names(globalPalette) #NOTE THIS DIDN"T WORK
globalPalette.ch<-as.character(globalPalette$globalPalette)
names(globalPalette.ch)<-glob.colz
GlobColScale<-scale_colour_manual(name = "Location",values = globalPalette.ch,na.value="grey60")
GlobFillScale<-scale_fill_manual(name = "Location",values = globalPalette.ch,na.value="grey60")
#read in lookup table to reduce cateogires to apply this color scheme (if haven't run MakeGlobalColors_boots.Rmd in this project already)
lookup.geo<-read.csv("colors_out/lookup.geo.csv",header = T)
##MAKE up a colorscheme for the four strategies
StratColorScale<-scale_color_manual(name="Strategy",values=brewer.pal(n=4,"Dark2"))
StratFillScale<-scale_fill_manual(name="Strategy",values=brewer.pal(n=4,"Dark2"))
