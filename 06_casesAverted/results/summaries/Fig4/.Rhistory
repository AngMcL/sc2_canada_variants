# avert.l$variant[gams2]<-"Gamma 2"
# for this one, have diff time categories (all, per1, per2)
#make ordered factors
var.ord<-unique(avert.l$VOC)
avert.l$VOC<-factor(avert.l$VOC, levels=var.ord)
#Make descriptive names for metrics
unique(avert.l$metric)
avert.l$metric.long<-str_replace_all(avert.l$metric,
c( "sublineage.per.day" = "Sublineages\naverted/day",
"sublineages"=  "Sublineages\naverted",
"singletons.per.day"  ="Singletons\naverted/day",
"singletons" = "Singletons\naverted",
"total.cases.per.day"= "Cases\naverted/day",
"total.cases"=  "Cases\naverted",
"percent.additional"="% additional\ncases"))
#order metrics
met.ord<-unique(avert.l$metric.long)
met.ord
avert.l$metric.long<-factor(avert.l$metric.long,
levels=met.ord)
## metrics to focus on
mets<-unique(avert.l$metric)
met.foc<-mets[c(1,2,6,7,8,9,10)]
#make a different set of labels unique to each VOC for time period
avert.l$period<-paste0(format(as.Date(avert.l$start),"%b %d %Y" )," - " ,
format(as.Date(avert.l$end),"%b %d %Y" ))
#manually add in year for the two instances where year cahnges in period
# avert.l$period[str_which(avert.l$period,"Dec 20 - Jan 06 2021")]<-"Dec 20 2020 - Jan 06 2021"
# avert.l$period[str_which(avert.l$period,"Dec 28 - Jan 06 2021")]<-"Dec 28 2020 - Jan 06 2021"
#add descrip
avert.l$period[avert.l$time=="all"]<-paste0("Entire intervention:\n", avert.l$period[avert.l$time=="all"])
avert.l$period[avert.l$time=="period 1"]<-paste0("Period 1:\n", avert.l$period[avert.l$time=="period 1"])
avert.l$period[avert.l$time=="period 2"]<-paste0("Period 2:\n", avert.l$period[avert.l$time=="period 2"])
#Manually change label for Gamma
avert.l$period[avert.l$VOC=="Gamma"]<-str_replace_all(avert.l$period[avert.l$VOC=="Gamma"], "Period", "Intervention")
#order
pers<-unique(avert.l$period)
avert.l$period<-factor(avert.l$period, levels=pers)
## Plot dat, all on the floor
avert.l %>%
filter(metric %in% met.foc) %>%
ggplot()+
geom_point(aes(x=period, y=mean, color=VOC, fill=VOC),
size=2, shape=23)+
geom_errorbar(aes(ymin=lower, ymax=upper,x=period, color=VOC),
width=.1,alpha=0.9) +
VOCColScale+
VOCFillScale+
pubTheme+
labs(x=NULL,y=NULL)+
theme(legend.position = "none",
axis.text.x=element_text(angle=45,hjust=1,vjust=1),
strip.text.x=element_text(face="bold",size=rel(1.5)),
strip.text.y=element_text(face="bold",size=rel(1.2)))+
# scale_y_continuous(breaks=seq(0,ylim,2))+
facet_grid(metric.long ~ VOC ,scales="free",switch = "y")
ggsave(paste0(f.out,"fig4_averted.png"),width=8, height=8,units="in")
### Work on cleaning up the confidence intevals esp where missing
## add gridlines
##
## Plot dat, all on the floor
avert.l %>%
filter(metric %in% met.foc) %>%
ggplot()+
geom_point(aes(x=period, y=mean, color=VOC, fill=VOC),
size=1, shape=23,alpha=0.9)+
geom_errorbar(aes(ymin=lower, ymax=upper,x=period, color=VOC),
width=.1,alpha=0.9) +
VOCColScale+
VOCFillScale+
pubTheme+
labs(x=NULL,y=NULL)+
theme(legend.position = "none",
axis.text.x=element_text(angle=45,hjust=1,vjust=1),
strip.text.x=element_text(face="bold",size=rel(1.5)),
strip.text.y=element_text(face="bold",size=rel(1.2)))+
# scale_y_continuous(breaks=seq(0,ylim,2))+
facet_grid(metric.long ~ VOC ,scales="free",switch = "y")
ggsave(paste0(f.out,"fig4_averted.png"),width=8, height=8,units="in")
## Plot dat, all on the floor
avert.l %>%
filter(metric %in% met.foc) %>%
ggplot()+
geom_point(aes(x=period, y=mean, color=VOC, fill=VOC),
size=2, shape=23,alpha=0.9)+
geom_errorbar(aes(ymin=lower, ymax=upper,x=period, color=VOC),
width=.2,alpha=0.9) +
VOCColScale+
VOCFillScale+
pubTheme+
labs(x=NULL,y=NULL)+
theme(legend.position = "none",
axis.text.x=element_text(angle=45,hjust=1,vjust=1),
strip.text.x=element_text(face="bold",size=rel(1.5)),
strip.text.y=element_text(face="bold",size=rel(1.2)))+
# scale_y_continuous(breaks=seq(0,ylim,2))+
facet_grid(metric.long ~ VOC ,scales="free",switch = "y")
ggsave(paste0(f.out,"fig4_averted.png"),width=8, height=8,units="in")
avert<-read.csv("../SummaryCasesAverted.csv")
colnames(avert)
avert[1,]
avert<-read.csv("../SummaryCasesAverted.csv")
colnames(avert)
avert<-avert[which(avert$VOC!=""),]
#cols that have ()
splitters<-c(9:17,19,21)
#make long - fold change and metric
avert.l<-avert %>%
pivot_longer(cols = splitters,names_to = "metric",values_to = "Averted") %>%
as.data.frame()
#string split the confidence interval for bars on plots
# avert.l<-avert.l[,-3] #get rid of dis
avert.l<-avert.l %>%
separate("Averted",into=c("mean","lower","upper"),sep="\\(|\\-|\\)",remove=F)
avert.l$mean<-as.numeric(avert.l$mean)
avert.l$upper<-as.numeric(avert.l$upper)
avert.l$lower<-as.numeric(avert.l$lower)
# #separate gammas
# gams1<-which(avert.l$variant=="Gamma" & avert.l$notes=="restriction1")
# avert.l$variant[gams1]<-"Gamma 1"
#
# gams2<-which(avert.l$variant=="Gamma" & avert.l$notes=="restriction2")
# avert.l$variant[gams2]<-"Gamma 2"
# for this one, have diff time categories (all, per1, per2)
#make ordered factors
var.ord<-unique(avert.l$VOC)
avert.l$VOC<-factor(avert.l$VOC, levels=var.ord)
#Make descriptive names for metrics
unique(avert.l$metric)
avert.l$metric.long<-str_replace_all(avert.l$metric,
c( "sublineage.per.day" = "Sublineages\naverted/day",
"sublineages"=  "Sublineages\naverted",
"singletons.per.day"  ="Singletons\naverted/day",
"singletons" = "Singletons\naverted",
"total.cases.per.day"= "Cases\naverted/day",
"total.cases"=  "Cases\naverted",
"percent.additional"="% additional\ncases"))
#order metrics
met.ord<-unique(avert.l$metric.long)
met.ord
avert.l$metric.long<-factor(avert.l$metric.long,
levels=met.ord)
## metrics to focus on
mets<-unique(avert.l$metric)
met.foc<-mets[c(1,2,6,7,8,9,10)]
#make a different set of labels unique to each VOC for time period
avert.l$period<-paste0(format(as.Date(avert.l$start),"%b %d %Y" )," - " ,
format(as.Date(avert.l$end),"%b %d %Y" ))
#manually add in year for the two instances where year cahnges in period
# avert.l$period[str_which(avert.l$period,"Dec 20 - Jan 06 2021")]<-"Dec 20 2020 - Jan 06 2021"
# avert.l$period[str_which(avert.l$period,"Dec 28 - Jan 06 2021")]<-"Dec 28 2020 - Jan 06 2021"
#add descrip
avert.l$period[avert.l$time=="all"]<-paste0("Entire intervention:\n", avert.l$period[avert.l$time=="all"])
avert.l$period[avert.l$time=="period 1"]<-paste0("Period 1:\n", avert.l$period[avert.l$time=="period 1"])
avert.l$period[avert.l$time=="period 2"]<-paste0("Period 2:\n", avert.l$period[avert.l$time=="period 2"])
#Manually change label for Gamma
avert.l$period[avert.l$VOC=="Gamma"]<-str_replace_all(avert.l$period[avert.l$VOC=="Gamma"], "Period", "Intervention")
#order
pers<-unique(avert.l$period)
avert.l$period<-factor(avert.l$period, levels=pers)
## Plot dat, all on the floor
avert.l %>%
filter(metric %in% met.foc) %>%
ggplot()+
geom_point(aes(x=period, y=mean, color=VOC, fill=VOC),
size=2, shape=23,alpha=0.9)+
geom_errorbar(aes(ymin=lower, ymax=upper,x=period, color=VOC),
width=.2,alpha=0.9) +
VOCColScale+
VOCFillScale+
pubTheme+
labs(x=NULL,y=NULL)+
theme(legend.position = "none",
axis.text.x=element_text(angle=45,hjust=1,vjust=1),
strip.text.x=element_text(face="bold",size=rel(1.5)),
strip.text.y=element_text(face="bold",size=rel(1.2)))+
# scale_y_continuous(breaks=seq(0,ylim,2))+
facet_grid(metric.long ~ VOC ,scales="free",switch = "y")
ggsave(paste0(f.out,"fig4_averted.png"),width=8, height=8,units="in")
### Work on cleaning up the confidence intevals esp where missing
## add gridlines
##
head(avert.l)
avert.l$averted[avert.l$VOC =="Beta" & avert.l$metric=="total.cases"]
avert.l$metric=="total.cases"
avert.l$VOC =="Beta"
avert.l$Averted[avert.l$VOC =="Beta" & avert.l$metric=="total.cases"]
avert.l$Averted[avert.l$VOC =="Beta" & avert.l$metric=="total.cases.per.day"]
# "1019.9 (-4.2-2012.7)" "1648.2 (1228.9-2220)" "-2.2 (-4.8-0.3)"
avert.l$Averted[avert.l$VOC =="Beta" & avert.l$metric=="percent.additional"]
## Plot dat, all on the floor
avert.l %>%
filter(metric %in% met.foc) %>%
ggplot()+
geom_point(aes(x=period, y=mean, color=VOC, fill=VOC),
size=2, shape=23,alpha=0.9)+
geom_errorbar(aes(ymin=lower, ymax=upper,x=period, color=VOC),
width=.2,alpha=0.9) +
VOCColScale+
VOCFillScale+
pubTheme+
labs(x=NULL,y=NULL)+
theme(legend.position = "none",
axis.text.x=element_text(angle=45,hjust=1,vjust=1),
strip.text.x=element_text(face="bold",size=rel(1.5)),
strip.text.y=element_text(face="bold",size=rel(1.2)))+
# scale_y_continuous(breaks=seq(0,ylim,2))+
facet_grid(metric.long ~ VOC ,scales="free_y",switch = "y")
ggsave(paste0(f.out,"fig4_averted.png"),width=8, height=8,units="in")
## Plot dat, all on the floor
avert.l %>%
filter(metric %in% met.foc) %>%
ggplot()+
geom_point(aes(x=period, y=mean, color=VOC, fill=VOC),
size=2, shape=23,alpha=0.9)+
geom_errorbar(aes(ymin=lower, ymax=upper,x=period, color=VOC),
width=.2,alpha=0.9) +
VOCColScale+
VOCFillScale+
pubTheme+
labs(x=NULL,y=NULL)+
theme(legend.position = "none",
axis.text.x=element_text(angle=45,hjust=1,vjust=1),
strip.text.x=element_text(face="bold",size=rel(1.5)),
strip.text.y=element_text(face="bold",size=rel(1.2)))+
# scale_y_continuous(breaks=seq(0,ylim,2))+
facet_grid(metric.long ~ VOC ,scales="free",switch = "y")
ggsave(paste0(f.out,"fig4_averted.png"),width=8, height=8,units="in")
# Chunk 1
library(tidyverse)
library(cowplot)
today<-Sys.Date()
f.out<-paste0(today,"_results/")
if(!dir.exists(f.out)){dir.create(f.out)}
avert<-read.csv("../SummaryCasesAverted.csv")
# Chunk 2
pubTheme<-theme(#panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background=element_rect("grey95"), axis.line = element_line(colour = "black"),
legend.key.size = unit(0.5,"line"),
text=element_text(size=10,face="bold"),
legend.text=element_text(size=6))
#read in variant colors
variant.colors.in<-"../../01_subSample/CleanMeta_PreSubsamp/variant_colors.tsv"
varPalette<-read.table(variant.colors.in,sep="\t")
## make color scheme
var.colz<-as.character(varPalette$vars.ch)
varPalette.ch<-row.names(varPalette)
names(varPalette.ch)<-var.colz
#restrict to vocs
var.ord1<-avert$VOC
varPalette.ch<-varPalette.ch[which(names(varPalette.ch) %in% var.ord1)]
# add<-c(varPalette.ch[4],varPalette.ch[4])
# names(add)<-c("Gamma 1","Gamma 2")
# varPalette.ch<-c(varPalette.ch,add)
## add separate colors for BA.1 and BA.1.1
### add separate groups for each omicron group
omis<-c("BA.1","BA.1.1")
# https://www.colorhexa.com/ec9a91
omiPalette.ch<-c("#e47266","#e8867b")
names(omiPalette.ch)<-omis
#full palette
morevarPal<-c(varPalette.ch,omiPalette.ch)
# morevarPal<-morevarPal[-which(names(morevarPal)=="Gamma")]
morevarPal<-morevarPal[c(1,2,4,3,5,6)]
VOCColScale<-scale_colour_manual(name = "Variant",values = morevarPal,na.value=NULL)
VOCFillScale<-scale_fill_manual(name = "Variant",values = morevarPal,na.value=NULL)
# Chunk 3
colnames(avert)
# avert[1,]
avert<-avert[which(avert$VOC!=""),]
#cols that have ()
splitters<-c(9:17,19,21)
#make long - fold change and metric
avert.l<-avert %>%
pivot_longer(cols = splitters,names_to = "metric",values_to = "Averted") %>%
as.data.frame()
#string split the confidence interval for bars on plots
# avert.l<-avert.l[,-3] #get rid of dis
avert.l<-avert.l %>%
separate("Averted",into=c("mean","lower","upper"),sep="\\(|\\-|\\)",remove=F)
avert.l$mean<-as.numeric(avert.l$mean)
avert.l$upper<-as.numeric(avert.l$upper)
avert.l$lower<-as.numeric(avert.l$lower)
head(avert.l)
avert.l$Averted[avert.l$VOC =="Beta" & avert.l$metric=="total.cases.per.day"]
# "1019.9 (-4.2-2012.7)" "1648.2 (1228.9-2220)" "-2.2 (-4.8-0.3)"
avert.l$Averted[avert.l$VOC =="Beta" & avert.l$metric=="percent.additional"]
# Chunk 4
# #separate gammas
# gams1<-which(avert.l$variant=="Gamma" & avert.l$notes=="restriction1")
# avert.l$variant[gams1]<-"Gamma 1"
#
# gams2<-which(avert.l$variant=="Gamma" & avert.l$notes=="restriction2")
# avert.l$variant[gams2]<-"Gamma 2"
# for this one, have diff time categories (all, per1, per2)
#make ordered factors
var.ord<-unique(avert.l$VOC)
avert.l$VOC<-factor(avert.l$VOC, levels=var.ord)
#Make descriptive names for metrics
unique(avert.l$metric)
avert.l$metric.long<-str_replace_all(avert.l$metric,
c( "sublineage.per.day" = "Sublineages\naverted/day",
"sublineages"=  "Sublineages\naverted",
"singletons.per.day"  ="Singletons\naverted/day",
"singletons" = "Singletons\naverted",
"total.cases.per.day"= "Cases\naverted/day",
"total.cases"=  "Cases\naverted",
"percent.additional"="% additional\ncases"))
#order metrics
met.ord<-unique(avert.l$metric.long)
met.ord
avert.l$metric.long<-factor(avert.l$metric.long,
levels=met.ord)
## metrics to focus on
mets<-unique(avert.l$metric)
met.foc<-mets[c(1,2,6,7,8,9,10)]
#make a different set of labels unique to each VOC for time period
avert.l$period<-paste0(format(as.Date(avert.l$start),"%b %d %Y" )," - " ,
format(as.Date(avert.l$end),"%b %d %Y" ))
#manually add in year for the two instances where year cahnges in period
# avert.l$period[str_which(avert.l$period,"Dec 20 - Jan 06 2021")]<-"Dec 20 2020 - Jan 06 2021"
# avert.l$period[str_which(avert.l$period,"Dec 28 - Jan 06 2021")]<-"Dec 28 2020 - Jan 06 2021"
#add descrip
avert.l$period[avert.l$time=="all"]<-paste0("Entire intervention:\n", avert.l$period[avert.l$time=="all"])
avert.l$period[avert.l$time=="period 1"]<-paste0("Period 1:\n", avert.l$period[avert.l$time=="period 1"])
avert.l$period[avert.l$time=="period 2"]<-paste0("Period 2:\n", avert.l$period[avert.l$time=="period 2"])
#Manually change label for Gamma
avert.l$period[avert.l$VOC=="Gamma"]<-str_replace_all(avert.l$period[avert.l$VOC=="Gamma"], "Period", "Intervention")
#order
pers<-unique(avert.l$period)
avert.l$period<-factor(avert.l$period, levels=pers)
## Plot dat, all on the floor
avert.l %>%
filter(metric %in% met.foc) %>%
ggplot()+
geom_point(aes(x=period, y=mean, color=VOC, fill=VOC),
size=2, shape=23,alpha=0.9)+
geom_errorbar(aes(ymin=lower, ymax=upper,x=period, color=VOC),
width=.2,alpha=0.9) +
VOCColScale+
VOCFillScale+
pubTheme+
labs(x=NULL,y=NULL)+
theme(legend.position = "none",
axis.text.x=element_text(angle=45,hjust=1,vjust=1),
strip.text.x=element_text(face="bold",size=rel(1.5)),
strip.text.y=element_text(face="bold",size=rel(1.2)))+
# scale_y_continuous(breaks=seq(0,ylim,2))+
facet_grid(metric.long ~ VOC ,scales="free",switch = "y")
ggsave(paste0(f.out,"fig4_averted.png"),width=8, height=8,units="in")
### Work on cleaning up the confidence intevals esp where missing
## add gridlines
##
unique(avert.l$metric)
avert.l$period[1:2]
avert.l$time[1:2]
avert.l %>%
filter(metric=="total.cases") %>%
filter(time=="all")
avert.l %>%
filter(metric=="total.cases") %>%
filter(time=="all") %>%
summarize(sumcases=sum(mean))
tot<-36127
1093.9/100000
tot<-36127
prob.hosp<-0.01
prob.icu<-0.21
prob.dead<-0.26
cost.host<-16000
cost.icu<-61000
tot*prob.hosp
hosp.cases<-tot*prob.hosp #361.27 hosp cases
hosp.cases*prob.icy
hosp.cases*prob.icu
uce.cases<-hosp.cases*prob.icu #75.8667
icu.cases<-hosp.cases*prob.icu #75.8667
dead.cases<-icu.cases*prob.dead
dead.cases
cost.hosp<-16000
nonicu.cost<-(hosp.cases-icu.cases)*cost.hosp
icu.cost<-icu.cases*cost.icu
icu.cost
nonicu.cost
totalcost<-nonicu.cost+icu.cost
totalcost
1093.9/100000
library(tidyverse)
library(ggplot2)
raw<-"library(knitr)
library(tidyverse)
library(stringr)
library(coronavirus)
library(ggplot2)
library(RColorBrewer)
library(zoo)
library(ggstance)
library(cowplot)
library(lubridate)
library(MASS)
library(ggrepel)
library(gtools)
library(data.table)
library(ggplotify)
library(gridExtra)
library(grid)
library(lattice)
library(reshape2)
library(gdata)
library(gtools)
library(ape)
library(treeio)
library(adephylo)"
raw
str_replace_all(raw,"library\\(","")
install.packages("stringr")
library(string)
library(stringr)
raw2<-str_replace_all(raw,"library\\(","")
raw2
raw3<-str_replace_all(raw2,"\\)",",")
raw23
raw3
raw3<-str_replace_all(raw2,"\\)\\\n,",")
raw3<-str_replace_all(raw2,"\\)\\\n",",")
raw3
raw4<-str_replace_all(raw3,"\\) \\\n",",")
raw4
raw5<-str_replace_all(raw3,"\\)","")
raw5
raw3<-str_replace_all(raw2,"\\)\\\n",",")
raw4<-str_replace_all(raw3,"\\) \\\n",",")
raw5<-str_replace_all(raw4,"\\)","")
raw5
pkgs<-raw5
raw6<-str_split(raw5,",")
raw6
raw6<-str_split(raw5,",") %>% unlist()
pkgs<-raw6
pkgs
install.packages(pkgs)
install.packages(pkgs)
#more?
raw<-c("devtools","stringi")
#more?
pkgs2<-c("devtools","stringi")
install.packages(pkgs2)
install.packages("BiocManager", repos = "https://cloud.r-project.org")
raw<-"library(plyr)
library(ggtree)
library(ggimage)
library(phytools)
library(phangorn)
library(forcats)
library(lubridate)
library(gridExtra)
library(cowplot)
library(ggstance)
library(ggalluvial)
library(ggmosaic)
library(gtools)
library(treeio)
library(magick)
library(treemapify)
library(EpiEstim)
library(incidence)
library(reshape2)
library(zoo)
library(fitdistrplus)
library(ggridges)"
#clean these up into a vector
#write a function to do this
libs2vector<-function(libs){
raw2<-str_replace_all(libs,"library\\(","")
raw3<-str_replace_all(raw2,"\\)\\\n",",")
raw4<-str_replace_all(raw3,"\\) \\\n",",")
raw5<-str_replace_all(raw4,"\\)","")
pkgs<-str_split(raw5,",") %>% unlist()
return(pkgs)
}
pkgs<-libs2vector(raw)
## script to install all R pacakges that I use (for after R updates, new computer, etc)
install.packages("stringr")
library(stringr) #need this for below
#clean these up into a vector
#write a function to do this
libs2vector<-function(libs){
raw2<-str_replace_all(libs,"library\\(","")
raw3<-str_replace_all(raw2,"\\)\\\n",",")
raw4<-str_replace_all(raw3,"\\) \\\n",",")
raw5<-str_replace_all(raw4,"\\)","")
pkgs<-str_split(raw5,",") %>% unlist()
return(pkgs)
}
pkgs<-libs2vector(raw)
pkgs3<-libs2vector(raw)
install.packages(pkgs3)
#R GIS libraries
more<-"library(rgdal)
library(rgeos)
library(maptools)
library(ggsn)
library(broom)
library(sf)
library(sp)
library(osmdata)
library(raster)
library(leaflet)"
install.packages(pkgs4)
pkgs4<-libs2vector(more)
install.packages(pkgs4)
